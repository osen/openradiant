<html>
<head>
<title>Quake III Arena Shader Manual: Introduction</title>
<link rel = "stylesheet" type = "text/css" href = "../styles/q3rad.css">
</head>
<body>
<h1 class = "MsoTitle">Q3Radiant Shader Manual</h1>
<hr>
<h1>1 Preface: Making Your Own Shaders</h1>

The Manual for the Q3Radiant editor program contains a section called <b><i>Creating New Assets</i></b> that has the necessary information for setting up the files to create your own custom Quake III Arena shaders. It is recommended that you study the scripts in this document and in the individual shader scripts. Pay careful attention to syntax and punctuation. This is where you are most likely to make mistakes.

<h1><a name = "intro">2 Introduction</a></h1>

The graphic engine for <i>QuakeIII Arena</i> has taken a step forward by putting much more direct control over the surface
qualities of textures into the hands of designers and artists. In writing this manual, we have tried to define the
concepts and tools that are used to modify textures in a way that, it is hoped, will be graspable by users who already have basic knowledge ofcomputer graphics but are not necessarily computer programmers. It is not a tutorial, nor was it intended to be one.

<h2><a name = "what">2.1 What is a Shader?</a></h2>

Shaders are short text scripts that define the properties of a surface as it appears and functions in a game world (or compatible editing tool). By convention, the documents that contain these scripts usually has the same name as the texture set which contains the textures being modified (e.g; base, hell, castle, etc,). Several specific script documents have also been created to handle special cases, like liquids, sky and special effects.

<p>For <i>Quake III Arena,</i>Shader scripts are located in quake3/baseq3/scripts.

<p> A <i>Quake III Arena</i>  shader file consists of a series of surface attribute and rendering instructions formatted
within braces ("{" and "}"). Below you can see a simple example of syntaxand format for a single process, including the
Q3MAP keywords or "SurfaceParameters", which follow the first bracket and a single bracketed "stage":

<p><pre class = "type">textures/liquids/lava
	{
	deformVertexes wave sin 0 3 0 0.1
	tessSize 64
	{
	map textures/common/lava.tga
	}
}
</pre>

<h2><a name = "conventions">2.2 Shader Name &amp; File Conventions</a></h2>
The first line is the shader name. Shader names can be up to 63 characters long. The names are often a mirror of
a pathname to a .tga file without the extension or base dir (/quake3/baseq3 in ourcase), but they do not need to be.

<p>Shaders that are only going to be referenced by the gamecode, not modeling tools, often are just a single world,
like"projectionShadow" or "viewBlood".

<p>Shaders that are used on characters or other polygon models need to mirror a .tga file, which allows the modelers to build with normal textures, then have the special effects show up when the model is loaded into the game.

<p>Shaders that are placed on surfaces in the map editor commonly mirror a .tga file, but the "qer_editorimage" shader parameter canforce the editor to use an arbitrary image for display.

<p>Shader pathnames have a case sensitivity issue - on windows, they <i>aren't</i> case sensitive, but on unix they <i>are</i>. Try to always use lowercase for filenames, and always use forward slashes "/" for directory separators.

<h2><a name = "types">2.3 Shader Types</a></h2>
The keywords that affect shaders are divided into two classes. The first class of keywords are global parameters. Some global parameters (<b>"surfaceparms."</b> And all <b>"q3map_" keywords</b>) are processed by Q3MAP, and change physical attributes of the surface that uses the shader. These attributes can affect the player. To see changes in these
parameters one must re-bsp the map.

<p>The remaining global keywords, and all Stage Specific Keywords are processed by the renderer. They are appearance changes
only and have no effect on game play or game mechanics. Changes to any of these attributes will take effect as soon as the game goes to another level or vid_restarts (type command <b>vid_restart</b> in the game console).

<p>Shader keywords are <i>not</i>case sensitive.

<p><b>IMPORTANT NOTE:</b> some of the shader commands may be order dependent, so it's good practice to place all global shader commands (keywords defined in this section) at the very beginning of the shader and to place shader stages at the end (see various examples).

<h2><a name = "concepts">2.4 Key Concepts</a></h2>

Ideally, a designer or artist who is manipulating textures with shader files has a basic understanding of wave forms and knows about mixing colored light (high school physics sort of stuff). If not, there are some concepts you need to have a
grasp on to make shaders work for you.

<p><div class = "subheading">2.4.1 Surface Effects vs. Content Effects vs. Deformation Effects</div>
Shaders not only modify the visible aspect of textures on a geometry brush, curve, patch or mesh model, but they can also have an effect on both the content, "shape," and apparent movement of those things. A surface effect does nothing to modify
the shape or content of the brush. Surface effects include glows, transparencies and rgb (red, green, blue) value
changes. Content shaders affect the way the brush operates in the game world. Examples include water, fog, nonsolid, and
structural. Deformation effects change the actual shape of the affected brush or curve, and may make it appear to move.

<p><div class = "subheading">2.4.2 Power Has a Price</div>
The shader script gives the designer, artist and programmer a great deal of easily accessible power over the appearance of
and potential special effects that may be applied to surfaces in the gameworld. But it is power that comes with a price tag
attached, and the cost is measured in performance speed. Each shader phase that affects the appearance of a texture causes the <i>Q3:A</i>engine to make another processing pass and redraw the world. Think of it as if you were adding all
the shader-affected triangles to the total r_speed count for each stage in the shader script. A shader-manipulated texture that is seen through another shader-manipulated texture (e.g. a light in fog) has the effect of <i>adding</i> the total number of passes together for the affected triangles. A light that required two passes seen through a fog that requires one pass will be treated as having to redraw that part of the world three times.

<p><div class = "subheading">2.4.3 RGB Color</div>

RGB means "Red, Green, Blue."Mixing red, green and blue light in differing intensities creates the colors in computers and television monitors. This is called <i>additive color</i> (as opposed to the mixing of pigments in paint or colored ink in the printing process, which is subtractive color). In <i>Quake III Arena</i> and most higher-end computer art programs (and the color selector in Windows), the intensities ofthe individual Red, Green and Blue components are expressed as number values. When mixed together on a screen, number values of equal intensity in each component color create a completely neutral (gray) color. The lower the number value (towards 0), the darker the shade. The higher the value, the lighter the shade or the more saturated the color until it reaches a maximum value of 255 (in the art programs). All colors possible on the computer can be expressed as a formula of three numbers. The value for complete black is 0 0 0. The value for complete white is 255 255 255. However, the <i>QuakeIII Arena</i> graphics engine requires that the color range be "normalized" into a range between 0.0 and 1.0.

<p><div class = "subheading">2.4.4 Normalization: a Scale of 0 to 1</div>
The mathematics in <i>Quake III Arena</i> use a scale of 0.0 to 1.0 instead of 0 to 255. Most computer art programs that can express RGB values as numbers use the 0 to 255 scale. To convert numbers, divide each of the artprogram's values for the component colors by 255. The resulting three values are your <i>Quake III Arena</i> formula for that color component. The same holds true for texture coordinates.

<p><div class = "subheading">2.4.5 Texture Sizes</div>
TGA texture files are measured in pixels (picture elements). Textures are measured in powers of 2, with 16 x16 pixels being the smallest (typically) texture in use. Most will be larger. Textures need not be square, so long as both dimensions are powers of 2. Examples include: 32x256, 16x32, 128x16.

<p><div class = "subheading">2.4.6 Color Math</div>

In <i>Quake III Arena</i> , colors are changed by mathematical equations worked on the textures by way ofthe scripts or
"programlets" in the shader file. An equation that adds to or multiplies the number values in atexture causes it to become
darker. Equations that subtract from or modulate number values in a texture cause it to become lighter. Either equation can change the hue and saturation of a color.

<p><div class = "subheading">2.4.7 Measurements</div>

The measurements used in the shaders are in either game units, color units, or texture units.

<p>&middot; <b>Game unit:</b> A game unit is used by deformations to specify sizes relative to the world. Game units are the same scale we have had since way back in the <i>Wolfenstein</i>days - 8 units equals one foot. The default texture scale used by the Q3Radiant map editor results in two texels for each game unit, but that can be freely changed.

<p>&middot; <b>Color units</b>: Colors scale the values generated by the texture units to produce lighting effects. A value of 0.0 will be completely black, and a value of 1.0 will leave the texture unchanged. Colors are sometimes specified with a single value to be used across all red, green,and blue channels, or sometimes as separate values for each channel.

<p>&middot; <b>Texture units:</b> This is the normalized (see above) dimensions of the original texture image (or a previously modified texture at a given stage in the shader pipeline). A full texture, regardless of its original size in texels, has a normalized measurement of 1.0 x 1.0. For normal repeating textures, it is possible to have value greater than 1.0 or less than 0.0, resulting in repeating of the texture. The coordinates are usually assigned by the level editor or
modeling tools, but you still need to be aware of this for scrolling or turbulent movement of the texture at runtime.

<p><div class = "subheading">2.4.8 Waveform Functions</div>
Many of the shader functions use waveforms to modulate measurements over time. Where appropriate, additional information is provided with wave modulated keyword functions to describe the effect of a particular waveform on that process. Currently there are five waveforms in use in <i>Q3A</i> shaders:

<p><b>Sin</b>: Sin standsfor sine wave, a regular smoothly flowing wave ranging from -1 to 1.
<br><b>Triangle:</b> Triangle is a wave with a sharp ascent and a sharp decay, ranging from 0 to 1.It will make a choppy looking wave forms.
<br><b>Square</b>: A squarewave simply switches from -1 to 1 with no in-between.
<br><b>Sawtooth:</b> In the sawtooth wave, the ascent is like a triangle wave from 0 to 1, but the decay cuts off sharply back to 0.
<br><b>Inversesawtooth:</b> This is the reverse of the sawtooth&hellip; instant ascent to the peak value (1), then a triangle wave descent to the valley value (0). The phase on this goes from 1.0 to 0.0 instead of 0.0 to 1.0. This wave is particularly usefulfor additive cross-fades.

<p><b>Waveforms all have thefollowing properties</b>:
<br><b>&lt;base&gt;</b> Where the wave form begins. Amplitude is measured from this base value.
<br><b>&lt;amplitude&gt;</b> This is the height of the wave created, measured from the base<b>.</b> You will probably need to test and tweak this value to get it correct for each new shader stage. The greater the amplitude, the higher the wave peaks and the deeper the valleys.
<br><b>&lt;phase&gt;</b> This is a normalized value between 0.0 and 1.0. Changing phase to a non-zero value affects the point on the wave at which the wave form initially begins to be plotted. Example: In Sin or Triangle wave, a phase of 0.25 means it begins one fourth (25%) of the way along the curve, or more simply put, it begins at the peak of the wave. A phaseof 0.5 would begin at the point the wave re-crosses the base line. A phase of 0.75 would be at the lowest point of the valley. If only one wave form is being used in a shader, a phase shift will probably not be noticed and phase should have a value of zero (0). However, including two or more stages of the same process in a single shader, but with the phases shifted can be used to create interesting visual effects. Example: using rgbGen in two stages with different colors and a 0.5 difference in phase would cause the manipulated texture to modulate between two distinct colors. Phase changes can also be used when you have two uses of the same effect near each other, and you don't want them to be synchronized. You would write a separate shader for each, changing only the phase value.
<br><b>&lt;freq&gt;</b>Frequency. This value is expressed as repetitions or cycles of the wave per second. A value of 1
would cycle once per second. A value of 10 would cycle 10 times per second. A value of 0.1 would cycle once every 10
seconds.
<p align = "center">Back | <a href = "../index.htm">Home</a> | <a href = "../ch02/pg2_1.htm">Next</a>

</body>
</html>